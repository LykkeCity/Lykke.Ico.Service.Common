// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.Service.IcoCommon.Client
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for IcoCommonAPI.
    /// </summary>
    public static partial class IcoCommonAPIExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='address'>
            /// </param>
            public static void AddPayInAddress(this IIcoCommonAPI operations, PayInAddressModel address = default(PayInAddressModel))
            {
                operations.AddPayInAddressAsync(address).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='address'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AddPayInAddressAsync(this IIcoCommonAPI operations, PayInAddressModel address = default(PayInAddressModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AddPayInAddressWithHttpMessagesAsync(address, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            public static void DeletePayInAddress(this IIcoCommonAPI operations, DeletePayInAddressRequest request = default(DeletePayInAddressRequest))
            {
                operations.DeletePayInAddressAsync(request).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeletePayInAddressAsync(this IIcoCommonAPI operations, DeletePayInAddressRequest request = default(DeletePayInAddressRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeletePayInAddressWithHttpMessagesAsync(request, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='campaignId'>
            /// </param>
            public static void DeleteCampaign(this IIcoCommonAPI operations, string campaignId)
            {
                operations.DeleteCampaignAsync(campaignId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='campaignId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteCampaignAsync(this IIcoCommonAPI operations, string campaignId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteCampaignWithHttpMessagesAsync(campaignId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void GetSentEmails(this IIcoCommonAPI operations)
            {
                operations.GetSentEmailsAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetSentEmailsAsync(this IIcoCommonAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetSentEmailsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void SendEmail(this IIcoCommonAPI operations)
            {
                operations.SendEmailAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SendEmailAsync(this IIcoCommonAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SendEmailWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void AddEmailTemplate(this IIcoCommonAPI operations)
            {
                operations.AddEmailTemplateAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AddEmailTemplateAsync(this IIcoCommonAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AddEmailTemplateWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='campaignId'>
            /// </param>
            public static void GetCampaignTemplates(this IIcoCommonAPI operations, string campaignId)
            {
                operations.GetCampaignTemplatesAsync(campaignId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='campaignId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetCampaignTemplatesAsync(this IIcoCommonAPI operations, string campaignId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetCampaignTemplatesWithHttpMessagesAsync(campaignId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='campaignId'>
            /// </param>
            /// <param name='templateId'>
            /// </param>
            public static void GetTemplate(this IIcoCommonAPI operations, string campaignId, string templateId)
            {
                operations.GetTemplateAsync(campaignId, templateId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='campaignId'>
            /// </param>
            /// <param name='templateId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetTemplateAsync(this IIcoCommonAPI operations, string campaignId, string templateId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetTemplateWithHttpMessagesAsync(campaignId, templateId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Checks service is alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object IsAlive(this IIcoCommonAPI operations)
            {
                return operations.IsAliveAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Checks service is alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> IsAliveAsync(this IIcoCommonAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IsAliveWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='transactions'>
            /// </param>
            public static int? HandleTransactions(this IIcoCommonAPI operations, IList<TransactionModel> transactions = default(IList<TransactionModel>))
            {
                return operations.HandleTransactionsAsync(transactions).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='transactions'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<int?> HandleTransactionsAsync(this IIcoCommonAPI operations, IList<TransactionModel> transactions = default(IList<TransactionModel>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.HandleTransactionsWithHttpMessagesAsync(transactions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
