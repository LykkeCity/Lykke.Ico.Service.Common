// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.Service.IcoCommon.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class TransactionModel
    {
        /// <summary>
        /// Initializes a new instance of the TransactionModel class.
        /// </summary>
        public TransactionModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TransactionModel class.
        /// </summary>
        /// <param name="currency">Possible values include: 'BTC', 'ETH',
        /// 'USD'</param>
        public TransactionModel(System.DateTime createdUtc, CurrencyType currency, double amount, string blockId = default(string), string uniqueId = default(string), string transactionId = default(string), string payInAddress = default(string))
        {
            BlockId = blockId;
            CreatedUtc = createdUtc;
            UniqueId = uniqueId;
            TransactionId = transactionId;
            PayInAddress = payInAddress;
            Currency = currency;
            Amount = amount;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "BlockId")]
        public string BlockId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "CreatedUtc")]
        public System.DateTime CreatedUtc { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "UniqueId")]
        public string UniqueId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "TransactionId")]
        public string TransactionId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "PayInAddress")]
        public string PayInAddress { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'BTC', 'ETH', 'USD'
        /// </summary>
        [JsonProperty(PropertyName = "Currency")]
        public CurrencyType Currency { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Amount")]
        public double Amount { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Amount < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Amount", 0);
            }
        }
    }
}
